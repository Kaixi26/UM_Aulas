// Modelo abstracto de um sistema de emissão de cartões bancários

abstract sig Status {}
one sig Unissued, Issued, Cancelled extends Status {}

sig Card {
	var status : one Status
}

sig Client {
	var cards : set Card
}


fun unissuedCards : set Card {
	{ c : Card | c.status = Unissued }
}

fun issuedCards : set Card {
	{ c : Card | c.status = Issued }
}

fun cancelledCards : set Card {
	{ c : Card | c.status = Cancelled }
}

fun emitted : lone Card {
	{ card : Card | some client : Client | emit[card, client] }
}

fun cancel : lone Card {
	{ card : Card | cancel[card] }
}

pred emmitedEnabled {
	some Client
	Unissued in Card.status
}

pred cancelEnabled {
	some Client
	Issued in Card.status
}

// Algumas das propriedades desejadas para o sistema

assert NoUnissuedCards {
	// Cartas não emitidas não podem pertencer a clientes
  	always Unissued not in Client.cards.status
}

assert NoSharedCards {
	// Cartas não podem ser partilhadas por clientes
	always all disj x, y : Client, c : x.cards | always (c not in y.cards)
}

assert AllCancelled {
	// Todas as cartas são canceladas eventualmente
	all c : Card | always (c.status = Issued implies eventually c.status = Cancelled)
}

// Especifique as condições iniciais do sistema

fact Init {
	Card.status = Unissued
	no Client.cards
	always (cancelEnabled => eventually not cancelEnabled)
	always (emmitedEnabled => eventually not emmitedEnabled)
}

// Especifique as operações do sistema por forma a garantir as propriedades
// de segurança

check NoUnissuedCards
check NoSharedCards

// Operação de emitir um cartão para um cliente
pred emit [card : Card, client : Client] {
	card in unissuedCards

	card.status' = Issued
	cards' = cards + (client -> card)
	all c : (Card - card) | c.status' = c.status
}

// Operação de cancelar um cartão
pred cancel [card : Card] {
	card in issuedCards

	card.status' = Cancelled
	cards' = cards - (Client -> card)
	all c : (Card - card) | c.status' = c.status
}

pred nop {
	status' = status
	cards' = cards
}

fact Traces {
	always (nop or some c : Card | cancel[c] or some a : Client | emit[c,a])
}

// Especifique um cenário onde 3 cartões são emitidos a pelo menos 2
// clientes e são todos inevitavelmente cancelados, usando os scopes
// para controlar a cardinalidade das assinaturas
// Tente também definir um theme onde os cartões emitidos são verdes
// e os cancelados são vermelhos, ocultando depois toda a informação que
// seja redundante 
// Pode introduzir definições auxiliares no modelo se necessário

run Exemplo {

} for exactly 3 Card, exactly 2 Client

// Especifique as condições de justiça estritamente necessárias para garantir a
// propriedade de animação

fact Fairness {

}

check AllCancelled
