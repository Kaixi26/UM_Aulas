/* 
Complete o seguinte modelo de uma colónia de camaleões onde o número de 
camaleões é fixo mas onde a cor de cada camaleão pode mudar de acordo com
as seguintes regras: 
- As cores possíveis são Verde, Azul e Amarelo
- Se 2 camaleões de cores diferentes se encontram mudam ambos para a terceira cor
- As cores só se alteram na situação acima 
*/

abstract sig Color {}
one sig Verde, Azul, Amarelo extends Color {}

sig Pos {}

sig Camaleao {
	var pos : one Pos,
	var color : one Color
}

fun verdes : set Camaleao {
	{ c : Camaleao | c.color = Verde }
}

fun azuis : set Camaleao {
	{ c : Camaleao | c.color = Azul }
}

fun amarelos : set Camaleao {
	{ c : Camaleao | c.color = Amarelo }
}

pred nop {
	color' = color
}

pred encontro[x,y : Camaleao] {
	x.color != y.color
	x.color' not in (x.color + y.color)
	y.color' not in (x.color + y.color)
	all c : (Camaleao - x - y) | c.color' = c.color
}

fact Comportamento {
	always (some disj x,y : Camaleao | x.pos = y.pos => encontro[x,y] else nop)
}

// Especifique as seguintes propriedades desta colónia

assert Estabilidade {
	// Se os camaleoes ficarem todos da mesma cor, as cores nunca mais mudam
	always (some c : Color | (all x : Camaleao | x.color = c) => (all x : Camaleao | x.color' = c))
}

check Estabilidade for 5

assert NaoConvergencia {
	// Se inicialmente há um camaleao verde e nenhum azul então não é possível
	// que a colónia fique toda amarela
	( (one c : Camaleao | c.color = Verde)
	  and (no c : Camaleao | c.color = Azul))
	 	=> always some c : Camaleao | c.color != Amarelo
}

check NaoConvergencia for 5

// Especifique um cenário onde existe um camaleao que não para de mudar de cor
// tomando recorrentemente todas as cores possíveis

run Exemplo {
	one c : Camaleao {
		always (c.color' != c.color)
		always (c.color'' not in (c.color + c.color'))
	}
} 

